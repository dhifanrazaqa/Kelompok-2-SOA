// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  phone       String?
  address     String
  organizer   Organizer?
  role        Role
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderTicker OrderTicket[]
  OrderEvent  OrderEvent[]
}

model Organizer {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  organizationName String
  contactName      String
  contactPhone     String
  contactEmail     String
  events           Event[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Event {
  id          String        @id @default(uuid())
  title       String
  type        EventType
  target      EventTarget
  budgetRange BudgetRange
  organizerId String
  organizer   Organizer     @relation(fields: [organizerId], references: [id])
  thumbnail   String?
  description String
  startDate   DateTime
  endDate     DateTime
  picName     String?
  picPhone    String?
  picEmail    String?
  status      EventStatus   @default(CONCEPTING)
  venue       Venue?
  checklist   Checklist[]
  documents   Document[]
  tickets     Ticket[]
  finance     Finance?
  OrderTicker OrderTicket[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderEvent  OrderEvent[]
}

model Venue {
  id        String   @id @default(uuid())
  eventId   String   @unique
  name      String
  address   String
  city      String
  capacity  Int
  latitude  Decimal
  longitude Decimal
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Checklist {
  id         String   @id @default(uuid())
  eventId    String   
  title      String
  description String?
  progress   Int
  event      Event    @relation(fields: [eventId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Document {
  id         String   @id @default(uuid())
  eventId    String
  name       String
  url        String
  event      Event    @relation(fields: [eventId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Finance {
  id            String   @id @default(uuid())
  eventId       String   @unique
  projected     Float
  target        Float
  sponsor       Float
  ticketRevenue Float
  event         Event    @relation(fields: [eventId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ticket {
  id          String        @id @default(uuid())
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id])
  name        String
  price       Float
  quota       Int
  sold        Int
  description String?
  OrderTicker OrderTicket[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderTicket {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  ticketId      String
  ticket        Ticket        @relation(fields: [ticketId], references: [id])
  eventId       String
  event         Event         @relation(fields: [eventId], references: [id])
  quantity      Int
  totalPrice    Decimal
  paymentStatus paymentStatus
  orderStatus   orderStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderEvent {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  eventId       String
  event         Event         @relation(fields: [eventId], references: [id])
  title         String
  description   String?
  totalPrice    Decimal
  paymentStatus paymentStatus
  orderStatus   orderStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum Role {
  PARTICIPANT
  ORGANIZER
  ADMIN
}

enum EventType {
  KONSER
  PARTY
  SEMINAR
  LAINNYA
}

enum EventTarget {
  PRIVATE
  PUBLIC
}

enum BudgetRange {
  FIVE_TO_TEN
  TEN_TO_TWENTY
  TWENTY_TO_THIRTYFIVE
  TENTATIVE
}

enum EventStatus {
  CONCEPTING
  PRODUCTION
  TICKETING
  ONGOING
}

enum paymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum orderStatus {
  NEW
  CONFIRMED
  CANCELLED
}
